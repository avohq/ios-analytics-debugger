// Generated by Avo VERSION 54.12.0, PLEASE EDIT WITH CARE

#import <Foundation/Foundation.h>
#import "Avo.h"
#pragma GCC diagnostic ignored "-Wundeclared-selector"

@interface NSArray (Map)

- (NSArray *)mapArray:(id (^)(id obj))block;

@end

@implementation NSArray (Map)

- (NSArray *)mapArray:(id (^)(id obj))block {
    NSMutableArray *result = [NSMutableArray arrayWithCapacity:[self count]];
    [self enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        [result addObject:block(obj)];
    }];
    return result;
}

@end


@interface AvoInvoke : NSObject

+ (void)invoke:(NSString *)eventId hash:(NSString *)hash messages:(NSArray *)messages;

+ (void)invokeMeta:(NSString *)type messages:(NSArray *)messages;

@end

static double samplingRate = 1.0;

NSString * toISO8601UTC(NSDate *date);
NSString * toISO8601UTC(NSDate *date) {
  NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
  [formatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"];
  [formatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
  [formatter setLocale:[NSLocale localeWithLocaleIdentifier:@"en_US_POSIX"]];
  return [formatter stringFromDate:date];
};

@implementation AvoInvoke

+ (void)invoke:(NSString *)eventId hash:(NSString *)hash messages:(NSArray *)messages {
  NSLog(@"samplingrate=%f", samplingRate);
  if (samplingRate > 0) {
    if (drand48() < samplingRate) {
      NSLog(@"invoke 6O01KzNeYfhvAG46Fhs9 master 0cd8DLUxoxnhXaqRxL6O DQ9ku0SjZ");
      NSDictionary *payload = @{
        @"ac": @"6O01KzNeYfhvAG46Fhs9",
        @"br": @"master",
        @"en": @"dev",
        @"ev": eventId,
        @"ha": hash,
        @"sc": @"0cd8DLUxoxnhXaqRxL6O",
        @"se": toISO8601UTC([NSDate date]),
        @"so": @"DQ9ku0SjZ",
        @"va": [messages count] == 0 ? @YES : @NO,
        @"me": messages,
        @"or": @"event"
      };

      NSError *jsonError = nil;
      NSData *json = [NSJSONSerialization dataWithJSONObject:payload options:kNilOptions error:&jsonError];
      NSURL *url = [NSURL URLWithString:@"https://api.avo.app/i"];
      NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
      [request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
      [request setHTTPMethod:@"POST"];
      [request setHTTPBody:json];

      NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        if (error != nil) {
          NSLog(@"%@", [error localizedDescription]);
          return;
        }
        if (data == nil) {
          NSLog(@"No data");
          return;
        }
        NSError *jsonError = nil;
        NSDictionary *responseJSON = (NSDictionary *)[NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&jsonError];
        NSNumber *rate = responseJSON[@"sa"];
        if (rate != nil) {
          samplingRate = [rate doubleValue];
        }
      }];
      [task resume];
    }
  }
}

+ (void)invokeMeta:(NSString *)type messages:(NSArray *)messages {
  if (samplingRate > 0) {
    if (drand48() < samplingRate) {
      NSLog(@"invokeMeta 6O01KzNeYfhvAG46Fhs9 master 0cd8DLUxoxnhXaqRxL6O DQ9ku0SjZ");
      NSDictionary *payload = @{
        @"ac": @"6O01KzNeYfhvAG46Fhs9",
        @"br": @"master",
        @"en": @"dev",
        @"ty": type,
        @"sc": @"0cd8DLUxoxnhXaqRxL6O",
        @"se": toISO8601UTC([NSDate date]),
        @"so": @"DQ9ku0SjZ",
        @"va": [messages count] == 0 ? @YES : @NO,
        @"me": @[]
      };

      NSError *jsonError = nil;
      NSData *json = [NSJSONSerialization dataWithJSONObject:payload options:kNilOptions error:&jsonError];
      NSURL *url = [NSURL URLWithString:@"https://api.avo.app/i"];
      NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
      [request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
      [request setHTTPMethod:@"POST"];
      [request setHTTPBody:json];

      NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
        if (error != nil) {
          NSLog(@"%@", [error localizedDescription]);
          return;
        }
        if (data == nil) {
          NSLog(@"No data");
          return;
        }
        NSError *jsonError = nil;
        NSDictionary *responseJSON = (NSDictionary *)[NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&jsonError];
        NSNumber *rate = responseJSON[@"sa"];
        if (rate != nil) {
          samplingRate = [rate doubleValue];
        }
      }];
      [task resume];
    }
  }
}

@end

@implementation Avo

static AVOEnv __ENV__ = -1;
static BOOL __STRICT__ = YES;

static NSObject * __DEBUGGER__ = nil;

+ (BOOL)mobileDebuggerEnabled {
    return [__DEBUGGER__ performSelector:@selector(isEnabled)];
}

+ (void)setSchemaIdInDebugger: (NSString *)schemaId {
    if ([__DEBUGGER__ respondsToSelector:@selector(setSchemaId:)]) {
        [__DEBUGGER__ performSelector:@selector(setSchemaId:) withObject:schemaId];
    }
}

+ (void)mobileDebuggerPostEvent: (NSString *)name withTimestamp:(NSNumber *)timestamp withId:(NSString *)eventId
                                withEventProps:(NSArray<NSDictionary *> *) eventProps withUserProps:(NSArray<NSDictionary *> *) userProps
                                withMessages:(NSArray<NSDictionary *> *)messages {
    [__DEBUGGER__ performSelector:@selector(publishEvent:withParams:) withObject:name withObject:@{@"timestamp" : timestamp, @"id":eventId, @"messages": messages, @"eventProps": eventProps, @"userProps": userProps}];
}

+ (NSArray *)assertInt:(NSString *)propertyId propertyName:(NSString *)propertyName value:(id)value
{
  NSString* type = [NSString stringWithUTF8String:[value objCType]];
  if (![type isEqualToString:@"i"]) {
    return @[@{@"tag": @"expectedIntType", @"propertyId": propertyId,
        @"message": [NSString stringWithFormat:@"%@ should be of type int but you provided %@", propertyName, type]}];
  }
  return @[];
}

+ (NSArray *)assertFloat:(NSString *)propertyId propertyName:(NSString *)propertyName value:(id)value
{
  NSString* type = [NSString stringWithUTF8String:[value objCType]];
  if (![type isEqualToString:@"d"]) {
    return @[@{@"tag": @"expectedFloatType", @"propertyId": propertyId,
        @"message": [NSString stringWithFormat:@"%@ should be of type float but you provided %@", propertyName, type]}];
  }
  return @[];
}

+ (NSArray *)assertBool:(NSString *)propertyId propertyName:(NSString *)propertyName value:(id)value
{
  NSString* type = [NSString stringWithUTF8String:[value objCType]];
  if (![type isEqualToString:@"c"]) {
    return @[@{@"tag": @"expectedBoolType", @"propertyId": propertyId,
        @"message": [NSString stringWithFormat:@"%@ should be of type bool but you provided %@", propertyName, type]}];
  }
  return @[];
}

+ (NSArray *)assertNonOptional:(NSString *)propertyId propertyName:(NSString *)propertyName value:(id)value
{
  if (value == nil) {
    return @[@{@"tag": @"expectedNonOptional", @"propertyId": propertyId,
        @"message": [NSString stringWithFormat:@"%@ is a required property but you provided null", propertyName]}];
  }
  return @[];
}

+ (NSArray *)assertMaxIntWithProperty:(NSString *)propertyId propertyName:(NSString *)propertyName max:(NSInteger)max value:(NSInteger)value
{
  if (value > max) {
    return @[@{@"tag": @"expectedMax", @"propertyId": propertyId,
        @"message": [NSString stringWithFormat:@"%@ has a maximum value of %@ but you provided the value %@", propertyName, @(max), @(value)]}];
  }
  return @[];
}

+ (NSArray *)assertFloatMaxWithProperty:(NSString *)propertyId propertyName:(NSString *)propertyName max:(double)max value:(double)value
{
  if (value > max) {
    return @[@{@"tag": @"expectedMax", @"propertyId": propertyId,
        @"message": [NSString stringWithFormat:@"%@ has a maximum value of %@ but you provided the value %@", propertyName, @(max), @(value)]}];
  }
  return @[];
}

+ (NSArray *)assertMinIntWithProperty:(NSString *)propertyId propertyName:(NSString *)propertyName min:(NSInteger)min value:(NSInteger)value
{
  if (value < min) {
    return @[@{@"tag": @"expectedMin", @"propertyId": propertyId,
        @"message": [NSString stringWithFormat:@"%@ has a minimum value of %@ but you provided the value %@", propertyName, @(min), @(value)]}];
  }
  return @[];
}

+ (NSArray *)assertMinFloatWithProperty:(NSString *)propertyId propertyName:(NSString *)propertyName min:(double)min value:(double)value
{
  if (value < min) {
    return @[@{@"tag": @"expectedMin", @"propertyId": propertyId,
        @"message": [NSString stringWithFormat:@"%@ has a minimum value of %@ but you provided the value %@", propertyName, @(min), @(value)]}];
  }
  return @[];
}

+ (NSArray *)assertNonNullEnum:(NSString *)propertyId propertyName:(NSString *)propertyName value:(unsigned long)value
{
  if (value < 0) {
    return @[@{@"tag": @"expectedInitializedEnum", @"propertyId": propertyId,
        @"message":[NSString stringWithFormat:@"%@ must not be a NULL enum", propertyName]}];
  }
  return @[];
}

+ (void)avoLoggerLogEventSent:(NSString *)eventName eventProperties:(NSDictionary *)eventProperties userProperties:(NSDictionary *)userProperties
{
  NSLog(@"[avo] Event Sent: %@ Event Props: %@ User Props: %@", eventName, eventProperties, userProperties);
}

static id<AVOCustomDestination> custom = nil;

+ (void)initAvoWithEnv:(AVOEnv)env
  customDestination:(nonnull id<AVOCustomDestination>)customDestination
  strict:(BOOL)strict
  debugger:(nonnull NSObject *)debugger
{
  __DEBUGGER__ = debugger;
  [self setSchemaIdInDebugger:@"0cd8DLUxoxnhXaqRxL6O"];
  
  [self initAvoWithEnv:env customDestination:customDestination strict:strict];
}

+ (void)initAvoWithEnv:(AVOEnv)env
  customDestination:(nonnull id<AVOCustomDestination>)customDestination
  debugger:(nonnull NSObject *)debugger
{
  __DEBUGGER__ = debugger;
  BOOL strict = debugger == nil;
  [self setSchemaIdInDebugger:@"0cd8DLUxoxnhXaqRxL6O"];
  
  [self initAvoWithEnv:env customDestination:customDestination strict:strict];
}

+ (void)initAvoWithEnv:(AVOEnv)env
  customDestination:(nonnull id<AVOCustomDestination>)customDestination
{
  [self initAvoWithEnv:env customDestination:customDestination strict:YES];
}

+ (void)initAvoWithEnv:(AVOEnv)env
  customDestination:(nonnull id<AVOCustomDestination>)customDestination
  strict:(BOOL)strict
{
  __ENV__ = env;
  
  __STRICT__ = strict;
  
  if (__ENV__ == AVOEnvProd) {
  }
  if (__ENV__ == AVOEnvDev) {
  }
  custom = customDestination;
  [custom make:env];
  if (__ENV__ != AVOEnvProd) {
    // debug console in Avo
    [AvoInvoke invokeMeta:@"init" messages:@[]];
  }
}

+ (NSArray *)assertUpcomingTrackName:(nonnull NSString *)upcomingTrackName
{
  NSMutableArray *messages = [[NSMutableArray alloc] init];
  [messages addObjectsFromArray:[self assertNonOptional:@"Lvi0sAE1Am" propertyName:@"Upcoming Track Name" value:upcomingTrackName]];
  return messages;
}

+ (NSArray *)assertCurrentSongName:(nonnull NSString *)currentSongName
{
  NSMutableArray *messages = [[NSMutableArray alloc] init];
  [messages addObjectsFromArray:[self assertNonOptional:@"kwANmf381A" propertyName:@"Current Song Name" value:currentSongName]];
  return messages;
}

/**
 * App Opened: No description
 *
 * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/oZvpnm2MM">App Opened</a>
 */
+ (void)appOpened
{
   // assert properties
   if (__ENV__ != AVOEnvProd || [self mobileDebuggerEnabled]) {
     NSArray *messages = @[];
     // debug console in Avo
     [AvoInvoke invoke:@"oZvpnm2MM" hash:@"98ec7005896737f35a50b7807105cb8b888e90a54d69861d8c055659665448dc" messages:messages];
     if ((__ENV__ != AVOEnvProd && __DEBUGGER__ != nil) || (__ENV__ == AVOEnvProd && [self mobileDebuggerEnabled])) {
       // Avo mobile debugger
       NSArray<NSDictionary *> * eventProps = @[];
       NSArray<NSDictionary *> * userProps = @[];
       [self mobileDebuggerPostEvent:@"App Opened" withTimestamp:[NSNumber numberWithDouble:[[NSDate date] timeIntervalSince1970]] withId:@"oZvpnm2MM" withEventProps:eventProps withUserProps:userProps withMessages:messages];
     }
   }
   
   if (__ENV__ != AVOEnvProd) {
     NSDictionary *avoLogEventProperties = @{};
     
     NSDictionary *avoLogUserProperties = @{};
     
     [self avoLoggerLogEventSent:@"App Opened" eventProperties:avoLogEventProperties userProperties:avoLogUserProperties];
   }
   
   NSDictionary *customEventProperties = @{};
   
   NSDictionary *customUserProperties = @{};
   
   [custom logEvent:@"App Opened" withEventProperties:customEventProperties];
 }

/**
 * Play: Sent when the user plays a track.
 * 
 * @param currentSongName The name of the song that's currently playing.
 *
 * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/6p9dLEHQVr">Play</a>
 */
+ (void)playWithCurrentSongName:(nonnull NSString *)currentSongName
{
  // assert properties
  if (__ENV__ != AVOEnvProd || [self mobileDebuggerEnabled]) {
    NSMutableArray *messages = [[NSMutableArray alloc] init];
    [messages addObjectsFromArray:[self assertCurrentSongName:currentSongName]];
    // debug console in Avo
    [AvoInvoke invoke:@"6p9dLEHQVr" hash:@"ec05900baed9766dca1e6513471efdd70674d3969afbfe88d7a52fcf9c8e71fa" messages:messages];
    if ((__ENV__ != AVOEnvProd && __DEBUGGER__ != nil) || (__ENV__ == AVOEnvProd && [self mobileDebuggerEnabled])) {
      // Avo mobile debugger
      NSArray<NSDictionary *> * eventProps = @[
        @{@"id" : @"kwANmf381A", @"name" : @"Current Song Name", @"value" : currentSongName ? [currentSongName description] : @"nil"}];
      NSArray<NSDictionary *> * userProps = @[];
      [self mobileDebuggerPostEvent:@"Play" withTimestamp:[NSNumber numberWithDouble:[[NSDate date] timeIntervalSince1970]] withId:@"6p9dLEHQVr" withEventProps:eventProps withUserProps:userProps withMessages:messages];
    }
    if (__ENV__ != AVOEnvProd) {
      if (__STRICT__) {
        if ([messages count] > 0) {
          NSDictionary * message = [messages objectAtIndex:0];
          [NSException raise:@"Error sending event" format:@"%@: %@", [message objectForKey:@"propertyId"], [message objectForKey:@"message"]];
        }
      } else {
        for (id message in messages) {
          NSLog(@"[avo] ERROR %@", [message objectForKey:@"message"]);
        }
      }
    }
  }
  
  if (__ENV__ != AVOEnvProd) {
    NSMutableDictionary *avoLogEventProperties = [[NSMutableDictionary alloc] init];
    if (currentSongName != nil) {
      avoLogEventProperties[@"Current Song Name"] = currentSongName;
    }
    
    NSDictionary *avoLogUserProperties = @{};
    
    [self avoLoggerLogEventSent:@"Play" eventProperties:avoLogEventProperties userProperties:avoLogUserProperties];
  }
  
  NSMutableDictionary *customEventProperties = [[NSMutableDictionary alloc] init];
  if (currentSongName != nil) {
    customEventProperties[@"Current Song Name"] = currentSongName;
  }
  
  NSDictionary *customUserProperties = @{};
  
  [custom logEvent:@"Play" withEventProperties:customEventProperties];
}

/**
 * Pause: Sent when the user pauses a track.
 * 
 * @param currentSongName The name of the song that's currently playing.
 *
 * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/Ei7HeAerpy">Pause</a>
 */
+ (void)pauseWithCurrentSongName:(nonnull NSString *)currentSongName
{
  // assert properties
  if (__ENV__ != AVOEnvProd || [self mobileDebuggerEnabled]) {
    NSMutableArray *messages = [[NSMutableArray alloc] init];
    [messages addObjectsFromArray:[self assertCurrentSongName:currentSongName]];
    // debug console in Avo
    [AvoInvoke invoke:@"Ei7HeAerpy" hash:@"b47fccf84f89843a571e956e21e80d782ad90a32c522cf836bfbe8e15c93df32" messages:messages];
    if ((__ENV__ != AVOEnvProd && __DEBUGGER__ != nil) || (__ENV__ == AVOEnvProd && [self mobileDebuggerEnabled])) {
      // Avo mobile debugger
      NSArray<NSDictionary *> * eventProps = @[
        @{@"id" : @"kwANmf381A", @"name" : @"Current Song Name", @"value" : currentSongName ? [currentSongName description] : @"nil"}];
      NSArray<NSDictionary *> * userProps = @[];
      [self mobileDebuggerPostEvent:@"Pause" withTimestamp:[NSNumber numberWithDouble:[[NSDate date] timeIntervalSince1970]] withId:@"Ei7HeAerpy" withEventProps:eventProps withUserProps:userProps withMessages:messages];
    }
    if (__ENV__ != AVOEnvProd) {
      if (__STRICT__) {
        if ([messages count] > 0) {
          NSDictionary * message = [messages objectAtIndex:0];
          [NSException raise:@"Error sending event" format:@"%@: %@", [message objectForKey:@"propertyId"], [message objectForKey:@"message"]];
        }
      } else {
        for (id message in messages) {
          NSLog(@"[avo] ERROR %@", [message objectForKey:@"message"]);
        }
      }
    }
  }
  
  if (__ENV__ != AVOEnvProd) {
    NSMutableDictionary *avoLogEventProperties = [[NSMutableDictionary alloc] init];
    if (currentSongName != nil) {
      avoLogEventProperties[@"Current Song Name"] = currentSongName;
    }
    
    NSDictionary *avoLogUserProperties = @{};
    
    [self avoLoggerLogEventSent:@"Pause" eventProperties:avoLogEventProperties userProperties:avoLogUserProperties];
  }
  
  NSMutableDictionary *customEventProperties = [[NSMutableDictionary alloc] init];
  if (currentSongName != nil) {
    customEventProperties[@"Current Song Name"] = currentSongName;
  }
  
  NSDictionary *customUserProperties = @{};
  
  [custom logEvent:@"Pause" withEventProperties:customEventProperties];
}

/**
 * Play Next Track: Sent when the user plays next track.
 * 
 * @param currentSongName The name of the song that's currently playing.
 * @param upcomingTrackName The name of the upcoming track.
 *
 * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/rQvcOWggzs">Play Next Track</a>
 */
+ (void)playNextTrackWithCurrentSongName:(nonnull NSString *)currentSongName
  upcomingTrackName:(nonnull NSString *)upcomingTrackName
{
  // assert properties
  if (__ENV__ != AVOEnvProd || [self mobileDebuggerEnabled]) {
    NSMutableArray *messages = [[NSMutableArray alloc] init];
    [messages addObjectsFromArray:[self assertCurrentSongName:currentSongName]];
    [messages addObjectsFromArray:[self assertUpcomingTrackName:upcomingTrackName]];
    // debug console in Avo
    [AvoInvoke invoke:@"rQvcOWggzs" hash:@"d4eda9725d6ab2d4b4c0de6c88236ec8cff7c1e55edde95bcf0c4b7e8c512f26" messages:messages];
    if ((__ENV__ != AVOEnvProd && __DEBUGGER__ != nil) || (__ENV__ == AVOEnvProd && [self mobileDebuggerEnabled])) {
      // Avo mobile debugger
      NSArray<NSDictionary *> * eventProps = @[
        @{@"id" : @"kwANmf381A", @"name" : @"Current Song Name", @"value" : currentSongName ? [currentSongName description] : @"nil"},
        @{@"id" : @"Lvi0sAE1Am", @"name" : @"Upcoming Track Name", @"value" : upcomingTrackName ? [upcomingTrackName description] : @"nil"}];
      NSArray<NSDictionary *> * userProps = @[];
      [self mobileDebuggerPostEvent:@"Play Next Track" withTimestamp:[NSNumber numberWithDouble:[[NSDate date] timeIntervalSince1970]] withId:@"rQvcOWggzs" withEventProps:eventProps withUserProps:userProps withMessages:messages];
    }
    if (__ENV__ != AVOEnvProd) {
      if (__STRICT__) {
        if ([messages count] > 0) {
          NSDictionary * message = [messages objectAtIndex:0];
          [NSException raise:@"Error sending event" format:@"%@: %@", [message objectForKey:@"propertyId"], [message objectForKey:@"message"]];
        }
      } else {
        for (id message in messages) {
          NSLog(@"[avo] ERROR %@", [message objectForKey:@"message"]);
        }
      }
    }
  }
  
  if (__ENV__ != AVOEnvProd) {
    NSMutableDictionary *avoLogEventProperties = [[NSMutableDictionary alloc] init];
    if (currentSongName != nil) {
      avoLogEventProperties[@"Current Song Name"] = currentSongName;
    }
    if (upcomingTrackName != nil) {
      avoLogEventProperties[@"Upcoming Track Name"] = upcomingTrackName;
    }
    
    NSDictionary *avoLogUserProperties = @{};
    
    [self avoLoggerLogEventSent:@"Play Next Track" eventProperties:avoLogEventProperties userProperties:avoLogUserProperties];
  }
  
  NSMutableDictionary *customEventProperties = [[NSMutableDictionary alloc] init];
  if (currentSongName != nil) {
    customEventProperties[@"Current Song Name"] = currentSongName;
  }
  if (upcomingTrackName != nil) {
    customEventProperties[@"Upcoming Track Name"] = upcomingTrackName;
  }
  
  NSDictionary *customUserProperties = @{};
  
  [custom logEvent:@"Play Next Track" withEventProperties:customEventProperties];
}

/**
 * Play Previous Track: Sent when the user plays previous track.
 * 
 * @param currentSongName The name of the song that's currently playing.
 * @param upcomingTrackName The name of the upcoming track.
 *
 * @see <a href="https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/xBjjLugyOM">Play Previous Track</a>
 */
+ (void)playPreviousTrackWithCurrentSongName:(nonnull NSString *)currentSongName
  upcomingTrackName:(nonnull NSString *)upcomingTrackName
{
  // assert properties
  if (__ENV__ != AVOEnvProd || [self mobileDebuggerEnabled]) {
    NSMutableArray *messages = [[NSMutableArray alloc] init];
    [messages addObjectsFromArray:[self assertCurrentSongName:currentSongName]];
    [messages addObjectsFromArray:[self assertUpcomingTrackName:upcomingTrackName]];
    // debug console in Avo
    [AvoInvoke invoke:@"xBjjLugyOM" hash:@"c0dc062dc9b955d054a7bf9fa68181d55f8c20f972bbb8bd709c6348a45b61b4" messages:messages];
    if ((__ENV__ != AVOEnvProd && __DEBUGGER__ != nil) || (__ENV__ == AVOEnvProd && [self mobileDebuggerEnabled])) {
      // Avo mobile debugger
      NSArray<NSDictionary *> * eventProps = @[
        @{@"id" : @"kwANmf381A", @"name" : @"Current Song Name", @"value" : currentSongName ? [currentSongName description] : @"nil"},
        @{@"id" : @"Lvi0sAE1Am", @"name" : @"Upcoming Track Name", @"value" : upcomingTrackName ? [upcomingTrackName description] : @"nil"}];
      NSArray<NSDictionary *> * userProps = @[];
      [self mobileDebuggerPostEvent:@"Play Previous Track" withTimestamp:[NSNumber numberWithDouble:[[NSDate date] timeIntervalSince1970]] withId:@"xBjjLugyOM" withEventProps:eventProps withUserProps:userProps withMessages:messages];
    }
    if (__ENV__ != AVOEnvProd) {
      if (__STRICT__) {
        if ([messages count] > 0) {
          NSDictionary * message = [messages objectAtIndex:0];
          [NSException raise:@"Error sending event" format:@"%@: %@", [message objectForKey:@"propertyId"], [message objectForKey:@"message"]];
        }
      } else {
        for (id message in messages) {
          NSLog(@"[avo] ERROR %@", [message objectForKey:@"message"]);
        }
      }
    }
  }
  
  if (__ENV__ != AVOEnvProd) {
    NSMutableDictionary *avoLogEventProperties = [[NSMutableDictionary alloc] init];
    if (currentSongName != nil) {
      avoLogEventProperties[@"Current Song Name"] = currentSongName;
    }
    if (upcomingTrackName != nil) {
      avoLogEventProperties[@"Upcoming Track Name"] = upcomingTrackName;
    }
    
    NSDictionary *avoLogUserProperties = @{};
    
    [self avoLoggerLogEventSent:@"Play Previous Track" eventProperties:avoLogEventProperties userProperties:avoLogUserProperties];
  }
  
  NSMutableDictionary *customEventProperties = [[NSMutableDictionary alloc] init];
  if (currentSongName != nil) {
    customEventProperties[@"Current Song Name"] = currentSongName;
  }
  if (upcomingTrackName != nil) {
    customEventProperties[@"Upcoming Track Name"] = upcomingTrackName;
  }
  
  NSDictionary *customUserProperties = @{};
  
  [custom logEvent:@"Play Previous Track" withEventProperties:customEventProperties];
}

@end

// AVOMODULEMAP:"Avo"
// AVOEVENTMAP:["appOpened","play","pause","playNextTrack","playPreviousTrack"]
